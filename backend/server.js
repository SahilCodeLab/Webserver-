require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { OpenAI } = require('openai');
const rateLimit = require('express-rate-limit');
const PDFDocument = require('pdfkit');
const fs = require('fs');

const app = express();
app.set('trust proxy', 1); // ‚úÖ Trust proxy for Render (Fix X-Forwarded-For)

const PORT = process.env.PORT || 3000;

// === Load Dedicated API Keys from .env ===
const {
  OPENROUTER_KEY_FOR_SHORT_ANSWER,
  OPENROUTER_KEY_FOR_ASSIGNMENT,
  OPENROUTER_KEY_FOR_LONG_ANSWER,
  OPENROUTER_KEY_FOR_ALL_IN_ONE,
} = process.env;

if (!OPENROUTER_KEY_FOR_SHORT_ANSWER || !OPENROUTER_KEY_FOR_ASSIGNMENT || !OPENROUTER_KEY_FOR_LONG_ANSWER || !OPENROUTER_KEY_FOR_ALL_IN_ONE) {
  console.error('‚ùå .env file mein chaaron (4) dedicated API keys zaroori hain!');
  process.exit(1);
}

// === AI Clients per Task ===
const shortAnswerClient = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_SHORT_ANSWER, baseURL: 'https://openrouter.ai/api/v1' });
const assignmentClient = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_ASSIGNMENT, baseURL: 'https://openrouter.ai/api/v1' });
const longAnswerClient = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_LONG_ANSWER, baseURL: 'https://openrouter.ai/api/v1' });
const allInOneClient = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_ALL_IN_ONE, baseURL: 'https://openrouter.ai/api/v1' });

// === Middleware ===
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use('/generate-*', rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));

// === PDF Generator Function ===
function generatePDF(content, res, title = 'EduSmart AI Document') {
  try {
    const doc = new PDFDocument({ margin: 50, size: 'A4', bufferPages: true });

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${title.toLowerCase().replace(/[^a-z0-9]/g, '-')}.pdf"`);
    doc.pipe(res);

    if (fs.existsSync('logo.png')) {
      doc.image('logo.png', 50, 45, { width: 100 });
    }

    doc.fillColor('#00008B').fontSize(20).font('Helvetica-Bold').text(title, { align: 'center' });
    doc.moveDown(2);
    doc.fillColor('#000').fontSize(12).font('Helvetica').text(content, { align: 'left', lineGap: 4 });

    const range = doc.bufferedPageRange();
    for (let i = range.start; i < range.start + range.count; i++) {
      doc.switchToPage(i);
      doc.fontSize(8).fillColor('#888').text(`Generated by EduSmart AI ‚Ä¢ ${new Date().toLocaleDateString('en-IN')} ‚Ä¢ Page ${i + 1} of ${range.count}`, 50, doc.page.height - 50, { align: 'center' });
    }

    doc.end();
  } catch (error) {
    console.error("PDF generation mein error:", error);
    res.status(500).json({ error: "PDF banane mein fail ho gaye." });
  }
}

// === AI Response Generator ===
async function generateAIResponse(prompt, context, taskPreference) {
  const taskConfig = {
    'short':      { model: 'google/gemma-3n-e2b-it:free', client: shortAnswerClient, keyName: 'SHORT_ANSWER' },
    'assignment': { model: 'google/gemini-2.0-flash-exp:free', client: assignmentClient, keyName: 'ASSIGNMENT' },
    'long':       { model: 'qwen/qwen3-coder:free', client: longAnswerClient, keyName: 'LONG_ANSWER' },
    'quiz':       { model: 'z-ai/glm-4.5-air:free', client: allInOneClient, keyName: 'ALL_IN_ONE' },
    'grammar':    { model: 'z-ai/glm-4.5-air:free', client: allInOneClient, keyName: 'ALL_IN_ONE' },
    'chat':       { model: 'z-ai/glm-4.5-air:free', client: allInOneClient, keyName: 'ALL_IN_ONE' },
  };

  const config = taskConfig[taskPreference];
  if (!config) throw new Error(`Task preference '${taskPreference}' ke liye koi configuration nahi hai.`);

  const { model, client, keyName } = config;

  try {
    console.log(`üéØ Task: ${taskPreference}, Model: ${model}, Using API Key for: ${keyName}`);
    const completion = await client.chat.completions.create({
      model,
      messages: [
        { role: 'system', content: context },
        { role: 'user', content: prompt }
      ],
      temperature: 0.7,
      max_tokens: 3000,
    });

    const result = completion.choices[0]?.message?.content?.trim();
    if (!result) throw new Error('AI model se khaali response mila');

    return { text: result, modelUsed: model, apiKeyUsed: `KEY_FOR_${keyName}` };

  } catch (error) {
    console.error(`‚ùå AI Error with key for '${keyName}':`, error.message);
    throw new Error(`AI service mein dikkat hai (Key: ${keyName}).`);
  }
}

// === API Endpoints ===

// ‚úÖ Assignment
app.post('/generate-assignment', async (req, res, next) => {
  try {
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ error: "Prompt zaroori hai" });

    const context = `Create a comprehensive, well-structured assignment on "${prompt}".`;
    const result = await generateAIResponse(prompt, context, 'assignment');

    if (req.query.download === 'pdf') {
      const pdfTitle = `Assignment - ${prompt.substring(0, 30)}`;
      return generatePDF(result.text, res, pdfTitle);
    }

    res.json(result);
  } catch (error) {
    next(error);
  }
});

// ‚úÖ Long Answer
app.post('/generate-long-answer', async (req, res, next) => {
  try {
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ error: "Prompt zaroori hai" });

    const context = `Provide a detailed, long-form, well-explained answer for the topic: "${prompt}".`;
    const result = await generateAIResponse(prompt, context, 'long');

    if (req.query.download === 'pdf') {
      const pdfTitle = `Long Answer - ${prompt.substring(0, 30)}`;
      return generatePDF(result.text, res, pdfTitle);
    }

    res.json(result);
  } catch (error) {
    next(error);
  }
});

// ‚úÖ Short Answer
app.post('/generate-short-answer', (req, res, next) => {
  generateAIResponse(req.body.prompt, `Provide a concise, short answer for "${req.body.prompt}".`, 'short')
    .then(d => res.json(d)).catch(next);
});

// ‚úÖ Quiz
app.post('/generate-quiz', (req, res, next) => {
  generateAIResponse(req.body.prompt, `Generate a quiz on the topic "${req.body.prompt}".`, 'quiz')
    .then(d => res.json(d)).catch(next);
});

// ‚úÖ Grammar Fix
app.post('/fix-grammar', (req, res, next) => {
  generateAIResponse(req.body.text, `Correct the grammar of the following text.`, 'grammar')
    .then(d => res.json(d)).catch(next);
});

// ‚úÖ Chat (if used)
app.post('/chat', (req, res, next) => {
  generateAIResponse(req.body.message, `You are a helpful AI chat tutor.`, 'chat')
    .then(d => res.json(d)).catch(next);
});

// Error Handler
app.use((err, req, res, next) => {
  console.error('‚ùå Server Error:', err.message);
  res.status(500).json({ error: err.message });
});

// Start Server
app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ Final Server with PDF support chal raha hai port ${PORT} par`);
});