// Sudhar ke saath aapka updated code

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const rateLimit = require('express-rate-limit');

const app = express();
const PORT = process.env.PORT || 3000;

// Environment Keys Check
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
if (!OPENROUTER_API_KEY) {
  console.error('‚ùå OPENROUTER_API_KEY .env file mein zaroori hai');
  process.exit(1);
}

// Middleware
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://yourdomain.com', 'https://www.yourdomain.com'] 
    : '*'
}));
app.use(express.json({ limit: '10mb' }));
app.use('/api-docs', express.static(path.join(__dirname, 'docs')));

// Rate limiting (applied to all /generate-* routes)
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Har IP se 100 requests per 15 min
  message: 'Bahut saare requests aa gaye hain, ‡§ï‡•É‡§™‡§Ø‡§æ baad mein try karein.'
});
app.use('/generate-*', limiter);

// OpenRouter Client
const openai = new OpenAI({
  apiKey: OPENROUTER_API_KEY,
  baseURL: 'https://openrouter.ai/api/v1',
});

// ‚ú® Unified AI Response Generator
async function generateAIResponse(prompt, context, modelPreference = 'auto') {
  if (!prompt || !context) {
    throw new Error('Prompt aur context dono zaroori hain');
  }

  const modelMap = {
    assignment: 'google/gemini-pro',
    long: 'google/gemini-pro',
    short: 'mistralai/mistral-7b-instruct:free',
    quiz: 'google/gemini-pro',
    grammar: 'mistralai/mistral-7b-instruct:free',
    chat: 'mistralai/mistral-7b-instruct:free',
    auto: 'google/gemini-pro'
  };

  const model = modelMap[modelPreference] || modelMap.auto;
  
  try {
    console.log(`üéØ Model istemal ho raha hai: ${model}`);

    const completion = await openai.chat.completions.create({
      model: model,
      messages: [
        { role: 'system', content: context },
        { role: 'user', content: prompt }
      ],
      temperature: 0.7,
      max_tokens: 2048,
      extra_headers: {
        'HTTP-Referer': process.env.SITE_URL || 'http://localhost:3000',
        'X-Title': process.env.SITE_NAME || 'EduSmart AI'
      }
    });

    const result = completion.choices[0]?.message?.content?.trim();
    if (!result) {
      throw new Error('AI model se khaali response mila');
    }

    return {
      text: result,
      source: 'openrouter',
      modelUsed: model,
      tokens: completion.usage?.total_tokens || 0,
      timestamp: new Date().toISOString()
    };

  } catch (error) {
    console.error('‚ùå AI Generation Error:', { model, error: error.message, status: error.status });
    let errorMessage = 'AI service abhi uplabdh nahi hai. Kripya baad mein try karein.';
    if (error.status === 401) errorMessage = 'Authentication fail ho gaya. API key check karein.';
    else if (error.status === 429) errorMessage = 'Rate limit cross ho gaya hai.';
    else if (error.status === 404) errorMessage = `Model '${model}' nahi mila.`;
    throw new Error(errorMessage);
  }
}

// üìÑ PDF Generator Function
function generatePDF(content, res, title = 'EduSmart AI Document') {
    const doc = new PDFDocument({ margin: 50, size: 'A4', bufferPages: true });

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${title.toLowerCase().replace(/[^a-z0-9]/g, '-')}.pdf"`);
    
    doc.pipe(res);

    // Header with local logo
    if (fs.existsSync('logo.png')) {
        doc.image('logo.png', 50, 45, { width: 100 });
    }
    doc.fillColor('#2563eb').fontSize(18).text(title, 160, 55);
    doc.moveTo(50, 100).lineTo(550, 100).strokeColor('#e5e7eb').stroke();

    // Content
    doc.fillColor('#1f2937').fontSize(12).font('Helvetica').text(content, { x: 50, y: 120, width: 500, align: 'left', lineGap: 4 });

    // Footer with page numbers
    const range = doc.bufferedPageRange();
    for (let i = range.start; i < range.start + range.count; i++) {
        doc.switchToPage(i);
        doc.fillColor('#6b7280').fontSize(10).text(`Page ${i + 1} of ${range.count} ‚Ä¢ Generated by EduSmart AI`, 50, 780, { align: 'center' });
    }
    
    doc.end();
}


// === API Endpoints ===

app.get('/health', (req, res) => {
  res.status(200).json({ status: 'operational', timestamp: new Date().toISOString(), version: '1.0.1' });
});

app.get('/', (req, res) => {
  res.json({ message: 'Welcome to EduSmart AI API', documentation: '/api-docs', status: 'active' });
});

app.post('/generate-assignment', async (req, res, next) => {
  try {
    const { prompt, level = 'high-school', subject = 'General' } = req.body;
    if (!prompt) return res.status(400).json({ error: 'Prompt zaroori hai' });

    const context = `Create a comprehensive assignment for ${level} level ${subject} students on "${prompt}". Include: Learning objectives, Instructions, Tasks/Questions, Evaluation criteria, and Submission guidelines.`;
    const result = await generateAIResponse(prompt, context, 'assignment');
    
    if (req.query.download === 'pdf') return generatePDF(result.text, res, `Assignment - ${prompt}`);
    res.json({ ...result, type: 'assignment', subject, level });
  } catch (error) {
    next(error); // Pass to central error handler
  }
});

app.post('/generate-long-answer', async (req, res, next) => {
  try {
    const { prompt, wordCount = '300-500' } = req.body;
    if (!prompt) return res.status(400).json({ error: 'Prompt zaroori hai' });

    const context = `Provide a detailed ${wordCount} word comprehensive explanation on "${prompt}". Structure with: Introduction, Main Body (with subheadings), Examples, and Conclusion.`;
    const result = await generateAIResponse(prompt, context, 'long');
    
    if (req.query.download === 'pdf') return generatePDF(result.text, res, `Long Answer - ${prompt}`);
    res.json({ ...result, type: 'long-answer' });
  } catch (error) {
    next(error); // Pass to central error handler
  }
});

app.post('/generate-short-answer', async (req, res, next) => {
  try {
    const { prompt } = req.body;
    if (!prompt) return res.status(400).json({ error: 'Prompt zaroori hai' });

    const context = `Provide a concise, accurate 2-3 sentence answer to "${prompt}".`;
    const result = await generateAIResponse(prompt, context, 'short');
    res.json({ ...result, type: 'short-answer' });
  } catch (error) {
    next(error); // Pass to central error handler
  }
});

app.post('/generate-quiz', async (req, res, next) => {
  try {
    const { prompt, difficulty = 'medium', questionCount = 5, quizType = 'mixed' } = req.body;
    if (!prompt) return res.status(400).json({ error: 'Topic zaroori hai' });

    const context = `Generate a ${questionCount}-question ${quizType} quiz on "${prompt}" at ${difficulty} difficulty. Include: Multiple choice, True/False, and Short answer questions. Provide answers with explanations at the end.`;
    const result = await generateAIResponse(prompt, context, 'quiz');
    
    if (req.query.download === 'pdf') return generatePDF(result.text, res, `Quiz - ${prompt}`);
    res.json({ ...result, type: 'quiz', difficulty, questionCount });
  } catch (error) {
    next(error); // Pass to central error handler
  }
});

app.post('/fix-grammar', async (req, res, next) => {
  try {
    const { text, style = 'academic' } = req.body;
    if (!text) return res.status(400).json({ error: 'Text zaroori hai' });

    const context = `Improve the grammar, punctuation, and ${style} style of the following text. Return only the corrected version.`;
    const result = await generateAIResponse(text, context, 'grammar');
    res.json({ ...result, type: 'grammar-correction', style });
  } catch (error) {
    next(error); // Pass to central error handler
  }
});

app.post('/chat', async (req, res, next) => {
  try {
    const { message, history = [], studentLevel = 'high-school' } = req.body;
    if (!message) return res.status(400).json({ error: 'Message zaroori hai' });

    const context = `You are an AI tutor for ${studentLevel} students. Be helpful and explain concepts clearly. Conversation history: ${JSON.stringify(history.slice(-3))}`;
    const result = await generateAIResponse(message, context, 'chat');
    res.json({ ...result, type: 'tutor-response' });
  } catch (error) {
    next(error); // Pass to central error handler
  }
});


// === Error Handling and 404 ===

// 404 handler for undefined routes
app.use((req, res) => {
  res.status(404).json({ error: 'Endpoint not found' });
});

// Central error handling middleware
app.use((err, req, res, next) => {
  console.error('‚ùå Server Error:', err.message);
  res.status(err.status || 500).json({
    error: 'Internal server error',
    message: err.message
  });
});

// === Server Start and Shutdown ===

const server = app.listen(PORT, '0.0.0.0', () => {
  console.log(`üöÄ EduSmart AI Server chal raha hai port ${PORT} par`);
  console.log(`üîí Environment: ${process.env.NODE_ENV || 'development'}`);
});

const gracefulShutdown = (signal) => {
  console.log(`${signal} mila. Server ko aaram se band kar rahe hain...`);
  server.close(() => {
    console.log('Process band ho gaya.');
    process.exit(0);
  });
};

process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

module.exports = { app, server };