require('dotenv').config(); const express = require('express'); const cors = require('cors'); const { OpenAI } = require('openai'); const rateLimit = require('express-rate-limit'); const PDFDocument = require('pdfkit'); const fs = require('fs');

const app = express(); const PORT = process.env.PORT || 3000;

// Trust proxy for rate-limiting in production app.set('trust proxy', 1);

// === Load API Keys === const { OPENROUTER_KEY_FOR_SHORT_ANSWER, OPENROUTER_KEY_FOR_ASSIGNMENT, OPENROUTER_KEY_FOR_LONG_ANSWER, OPENROUTER_KEY_FOR_ALL_IN_ONE, } = process.env;

if (!OPENROUTER_KEY_FOR_SHORT_ANSWER || !OPENROUTER_KEY_FOR_ASSIGNMENT || !OPENROUTER_KEY_FOR_LONG_ANSWER || !OPENROUTER_KEY_FOR_ALL_IN_ONE) { console.error('‚ùå .env file mein chaaron (4) dedicated API keys zaroori hain!'); process.exit(1); }

// === Initialize AI Clients === const shortAnswerClient = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_SHORT_ANSWER, baseURL: 'https://openrouter.ai/api/v1' }); const assignmentClient   = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_ASSIGNMENT, baseURL: 'https://openrouter.ai/api/v1' }); const longAnswerClient   = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_LONG_ANSWER, baseURL: 'https://openrouter.ai/api/v1' }); const allInOneClient     = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_ALL_IN_ONE, baseURL: 'https://openrouter.ai/api/v1' });

// Middleware app.use(cors()); app.use(express.json({ limit: '10mb' })); const limiter = rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }); app.use('/generate-*', limiter);

// === PDF Generator === function generatePDF(content, res, title = 'EduSmart AI Document') { try { const doc = new PDFDocument({ margin: 50, size: 'A4', bufferPages: true }); res.setHeader('Content-Type', 'application/pdf'); res.setHeader('Content-Disposition', attachment; filename="${title.toLowerCase().replace(/[^a-z0-9]/g, '-')}.pdf"); doc.pipe(res);

// Header
if (fs.existsSync('logo.png')) doc.image('logo.png', 50, 45, { width: 100 });
doc.fillColor('#00008B').fontSize(20).font('Helvetica-Bold').text(title, { align: 'center' });
doc.moveDown(2);

// Content
doc.fillColor('#000').fontSize(12).font('Helvetica').text(content, { align: 'left', lineGap: 4 });

// Footer
const range = doc.bufferedPageRange();
for (let i = range.start; i < range.start + range.count; i++) {
  doc.switchToPage(i);
  doc.fontSize(8).fillColor('#888').text(`Generated by EduSmart AI ‚Ä¢ ${new Date().toLocaleDateString('en-IN')} ‚Ä¢ Page ${i + 1} of ${range.count}`, 50, doc.page.height - 50, { align: 'center' });
}

doc.end();

} catch (err) { console.error("PDF generation mein error:", err); res.status(500).json({ error: "PDF banane mein fail ho gaye." }); } }

// === AI Response Handler === async function generateAIResponse(prompt, context, taskPreference) { const taskConfig = { 'short':      { model: 'google/gemma-3n-e2b-it:free', client: shortAnswerClient, keyName: 'SHORT_ANSWER' }, 'assignment': { model: 'google/gemini-2.0-flash-exp:free', client: assignmentClient, keyName: 'ASSIGNMENT' }, 'long':       { model: 'qwen/qwen3-coder:free', client: longAnswerClient, keyName: 'LONG_ANSWER' }, 'quiz':       { model: 'z-ai/glm-4.5-air:free', client: allInOneClient, keyName: 'ALL_IN_ONE' }, 'grammar':    { model: 'z-ai/glm-4.5-air:free', client: allInOneClient, keyName: 'ALL_IN_ONE' }, 'chat':       { model: 'z-ai/glm-4.5-air:free', client: allInOneClient, keyName: 'ALL_IN_ONE' }, };

const config = taskConfig[taskPreference]; if (!config) throw new Error(Task preference '${taskPreference}' ke liye koi configuration nahi hai.);

const { model, client, keyName } = config;

try { console.log(üéØ Task: ${taskPreference}, Model: ${model}, Using API Key for: ${keyName}); const completion = await client.chat.completions.create({ model, messages: [ { role: 'system', content: context }, { role: 'user', content: prompt }, ], temperature: 0.7, max_tokens: 3000, });

const result = completion.choices[0]?.message?.content?.trim();
if (!result) throw new Error('AI model se khaali response mila');
return { text: result, modelUsed: model, apiKeyUsed: `KEY_FOR_${keyName}` };

} catch (error) { console.error(‚ùå AI Error with key for '${keyName}':, error.message); throw new Error(AI service mein dikkat hai (Key: ${keyName}).); } }

// === Endpoints === app.post('/generate-assignment', async (req, res, next) => { try { const { prompt } = req.body; if (!prompt) return res.status(400).json({ error: "Prompt zaroori hai" }); const result = await generateAIResponse(prompt, Create a comprehensive assignment on: ${prompt}, 'assignment'); if (req.query.download === 'pdf') return generatePDF(result.text, res, Assignment - ${prompt.substring(0, 30)}); res.json(result); } catch (err) { next(err); } });

app.post('/generate-long-answer', async (req, res, next) => { try { const { prompt } = req.body; if (!prompt) return res.status(400).json({ error: "Prompt zaroori hai" }); const result = await generateAIResponse(prompt, Provide a detailed answer on: ${prompt}, 'long'); if (req.query.download === 'pdf') return generatePDF(result.text, res, Long Answer - ${prompt.substring(0, 30)}); res.json(result); } catch (err) { next(err); } });

app.post('/generate-short', async (req, res, next) => { try { const { prompt } = req.body; if (!prompt) return res.status(400).json({ error: "Prompt zaroori hai" }); const result = await generateAIResponse(prompt, Give a short answer: ${prompt}, 'short'); res.json(result); } catch (err) { next(err); } });

app.post('/generate-quiz', async (req, res, next) => { try { const { prompt } = req.body; if (!prompt) return res.status(400).json({ error: "Prompt zaroori hai" }); const result = await generateAIResponse(prompt, Make a quiz based on: ${prompt}, 'quiz'); res.json(result); } catch (err) { next(err); } });

app.post('/generate-fix-grammar', async (req, res, next) => { try { const { text } = req.body; if (!text) return res.status(400).json({ error: "Text zaroori hai" }); const result = await generateAIResponse(text, Fix grammar for: ${text}, 'grammar'); res.json(result); } catch (err) { next(err); } });

app.post('/chat', async (req, res, next) => { try { const { message } = req.body; if (!message) return res.status(400).json({ error: "Message zaroori hai" }); const result = await generateAIResponse(message, You're a helpful chatbot., 'chat'); res.json(result); } catch (err) { next(err); } });

// Global error handler app.use((err, req, res, next) => { console.error('‚ùå Server Error:', err.message); res.status(500).json({ error: err.message }); });

// Start server app.listen(PORT, '0.0.0.0', () => { console.log(üöÄ Server live on port ${PORT}); });

