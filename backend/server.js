require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// 🔌 Different Clients for Different Keys
const openai1 = new OpenAI({ apiKey: process.env.OPENROUTER_API_KEY, baseURL: 'https://openrouter.ai/api/v1' });
const openai2 = new OpenAI({ apiKey: process.env.OPENROUTER_API_KEY_2, baseURL: 'https://openrouter.ai/api/v1' });
const openai3 = new OpenAI({ apiKey: process.env.OPENROUTER_API_KEY_3, baseURL: 'https://openrouter.ai/api/v1' });

// 🔁 Generic Function
async function callModelWithClient(openai, model, prompt, context) {
    const fullPrompt = `${context}\n\n${prompt}`;
    const completion = await openai.chat.completions.create({
        model,
        messages: [
            { role: 'system', content: context },
            { role: 'user', content: prompt }
        ],
        extra_headers: {
            'HTTP-Referer': 'https://sahil.editor.ai',
            'X-Title': 'SahilCodeLabAI'
        }
    });
    return completion.choices[0].message.content;
}

// 📄 PDF Generator
function generatePDF(content, res) {
    const doc = new PDFDocument();
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=output.pdf');
    doc.pipe(res);
    doc.font('Times-Roman').fontSize(14).text(content);
    doc.fontSize(10).fillColor('gray').text('\nGenerated by SahilCodeLab', { align: 'center' });
    doc.end();
}

// 🧠 Short Answer - Gemma
app.post('/generate-short-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        const context = 'Answer in 2-3 lines clearly.';
        const result = await callModelWithClient(openai1, 'google/gemma-3n-e2b-it:free', prompt, context);
        res.json({ text: result, source: 'gemma' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// 📚 Long Answer - Qwen
app.post('/generate-long-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        const context = 'Write a detailed answer (300-500 words).';
        const result = await callModelWithClient(openai2, 'qwen/qwen3-coder:free', prompt, context);
        if (req.query.download === 'pdf') return generatePDF(result, res);
        res.json({ text: result, source: 'qwen' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// 📄 Assignment - Gemini Flash
app.post('/generate-assignment', async (req, res) => {
    try {
        const { prompt } = req.body;
        const context = 'Create a 9-10 page academic assignment (3500+ words) with clear headings.';
        const result = await callModelWithClient(openai3, 'google/gemini-2.0-flash-exp:free', prompt, context);
        if (req.query.download === 'pdf') return generatePDF(result, res);
        res.json({ text: result, source: 'gemini' });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// 🔍 Health check
app.get('/health', (req, res) => {
    res.json({ status: 'live', message: 'API ready from SahilCodeLab ✅' });
});

// 🚀 Server start
app.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
});