// üìÅ server.js (Full Error-Aware Backend for EduSmart AI)

require('dotenv').config(); const express = require('express'); const cors = require('cors'); const rateLimit = require('express-rate-limit'); const { OpenAI } = require('openai'); const PDFDocument = require('pdfkit'); const fs = require('fs');

const app = express(); const PORT = process.env.PORT || 10000; app.set('trust proxy', 1); // Fix for Render proxy error

// üîê Load API Keys from .env const { OPENROUTER_KEY_FOR_SHORT_ANSWER, OPENROUTER_KEY_FOR_ASSIGNMENT, OPENROUTER_KEY_FOR_LONG_ANSWER, OPENROUTER_KEY_FOR_ALL_IN_ONE, } = process.env;

if (!OPENROUTER_KEY_FOR_SHORT_ANSWER || !OPENROUTER_KEY_FOR_ASSIGNMENT || !OPENROUTER_KEY_FOR_LONG_ANSWER || !OPENROUTER_KEY_FOR_ALL_IN_ONE) { console.error('‚ùå ERROR: Missing one or more API keys in .env file.'); process.exit(1); }

// üîß AI Clients const shortAnswerClient = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_SHORT_ANSWER, baseURL: 'https://openrouter.ai/api/v1' }); const assignmentClient  = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_ASSIGNMENT, baseURL: 'https://openrouter.ai/api/v1' }); const longAnswerClient = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_LONG_ANSWER, baseURL: 'https://openrouter.ai/api/v1' }); const allInOneClient    = new OpenAI({ apiKey: OPENROUTER_KEY_FOR_ALL_IN_ONE, baseURL: 'https://openrouter.ai/api/v1' });

// ‚öôÔ∏è Middleware app.use(cors()); app.use(express.json({ limit: '10mb' })); app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));

// üìÑ PDF Generator function generatePDF(content, res, title = 'EduSmart AI Document') { try { const doc = new PDFDocument({ margin: 50, size: 'A4', bufferPages: true }); res.setHeader('Content-Type', 'application/pdf'); res.setHeader('Content-Disposition', attachment; filename="${title.toLowerCase().replace(/[^a-z0-9]/g, '-')}.pdf"); doc.pipe(res);

// Header
if (fs.existsSync('logo.png')) {
  doc.image('logo.png', 50, 45, { width: 100 });
}
doc.fillColor('#00008B').fontSize(20).font('Helvetica-Bold').text(title, { align: 'center' });
doc.moveDown(2);

// Content
doc.fillColor('#000').fontSize(12).font('Helvetica').text(content, { align: 'left', lineGap: 4 });

// Footer with Page Numbers
const range = doc.bufferedPageRange();
for (let i = range.start; i < range.start + range.count; i++) {
  doc.switchToPage(i);
  doc.fontSize(8).fillColor('#888').text(`Generated by EduSmart AI ‚Ä¢ ${new Date().toLocaleDateString()} ‚Ä¢ Page ${i + 1} of ${range.count}`, 50, doc.page.height - 50, { align: 'center' });
}
doc.end();

} catch (err) { console.error("PDF generation error:", err); res.status(500).json({ error: "PDF banane mein error aaya." }); } }

// üîÆ Main AI Handler async function generateAIResponse(prompt, context, taskPreference) { const taskConfig = { short: { model: 'google/gemma-3n-e2b-it:free', client: shortAnswerClient, keyName: 'SHORT_ANSWER' }, assignment: { model: 'google/gemini-2.0-flash-exp:free', client: assignmentClient, keyName: 'ASSIGNMENT' }, long: { model: 'qwen/qwen3-coder:free', client: longAnswerClient, keyName: 'LONG_ANSWER' }, quiz: { model: 'z-ai/glm-4.5-air:free', client: allInOneClient, keyName: 'ALL_IN_ONE' }, grammar: { model: 'z-ai/glm-4.5-air:free', client: allInOneClient, keyName: 'ALL_IN_ONE' }, chat: { model: 'z-ai/glm-4.5-air:free', client: allInOneClient, keyName: 'ALL_IN_ONE' } };

const config = taskConfig[taskPreference]; if (!config) throw new Error(‚õî Invalid task: '${taskPreference}' not recognized.);

const { model, client, keyName } = config;

try { console.log(üéØ Task: ${taskPreference}, Model: ${model}, API Key: ${keyName});

const response = await client.chat.completions.create({
  model,
  messages: [
    { role: 'system', content: context },
    { role: 'user', content: prompt }
  ],
  temperature: 0.7,
  max_tokens: 3000,
});

const result = response.choices?.[0]?.message?.content?.trim();
if (!result) throw new Error("‚ùå AI returned empty response.");

return { text: result, modelUsed: model, apiKeyUsed: keyName };

} catch (error) { const code = error.status || error.code || "UNKNOWN"; console.error(‚ùå Error (Key: ${keyName}) [${code}]:, error.message || error); throw new Error(AI se response lene mein error: ${keyName} (${code})); } }

// üöÄ API Endpoints app.post('/generate-assignment', async (req, res, next) => { try { const { prompt } = req.body; if (!prompt) return res.status(400).json({ error: "Prompt is required" });

const context = `Create a full-length assignment on: ${prompt}`;
const result = await generateAIResponse(prompt, context, 'assignment');

if (req.query.download === 'pdf') return generatePDF(result.text, res, `Assignment - ${prompt.slice(0, 30)}`);
res.json(result);

} catch (err) { next(err); } });

app.post('/generate-long-answer', async (req, res, next) => { try { const { prompt } = req.body; if (!prompt) return res.status(400).json({ error: "Prompt is required" });

const context = `Give a detailed long-form answer on: ${prompt}`;
const result = await generateAIResponse(prompt, context, 'long');

if (req.query.download === 'pdf') return generatePDF(result.text, res, `Long Answer - ${prompt.slice(0, 30)}`);
res.json(result);

} catch (err) { next(err); } });

app.post('/generate-short-answer', async (req, res, next) => { try { const result = await generateAIResponse(req.body.prompt, Short answer for: ${req.body.prompt}, 'short'); res.json(result); } catch (err) { next(err); } });

app.post('/generate-quiz', async (req, res, next) => { try { const result = await generateAIResponse(req.body.prompt, Create a quiz on: ${req.body.prompt}, 'quiz'); res.json(result); } catch (err) { next(err); } });

app.post('/fix-grammar', async (req, res, next) => { try { const result = await generateAIResponse(req.body.text, Fix grammar for this text., 'grammar'); res.json(result); } catch (err) { next(err); } });

app.post('/chat', async (req, res, next) => { try { const result = await generateAIResponse(req.body.message, You're a helpful AI assistant., 'chat'); res.json(result); } catch (err) { next(err); } });

// üõë Central Error Handler app.use((err, req, res, next) => { console.error('‚ùå Server Error:', err.message); res.status(500).json({ error: err.message }); });

// üåç Server Listen app.listen(PORT, () => { console.log(üöÄ Server live on port ${PORT}); });

