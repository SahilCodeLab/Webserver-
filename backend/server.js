// 🌐 Required Packages
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { OpenAI } = require('openai');
const PDFDocument = require('pdfkit');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json());

// 🔐 API Keys
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;

// 🔌 OpenAI Client via OpenRouter
const openai = new OpenAI({
    apiKey: OPENROUTER_API_KEY,
    baseURL: 'https://openrouter.ai/api/v1',
});

// 🔁 Common function to call specific model
async function callModelWithPrompt(model, prompt, context) {
    const fullPrompt = `${context}\n\n${prompt}`.trim();

    const completion = await openai.chat.completions.create({
        model,
        messages: [
            { role: 'system', content: context },
            { role: 'user', content: prompt }
        ],
        extra_headers: {
            'HTTP-Referer': 'https://your-frontend.site', // Change this
            'X-Title': 'SahilCodeLabAI'
        }
    });

    const result = completion.choices[0].message.content;
    return result;
}

// 📄 PDF Generator
function generatePDF(content, res) {
    const doc = new PDFDocument();
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=output.pdf');

    doc.pipe(res);
    doc.font('Times-Roman').fontSize(14).text(content);
    doc.moveDown();
    doc.fontSize(10).fillColor('gray').text('\nGenerated by SahilCodeLab', { align: 'center' });
    doc.end();
}

// ✅ Short Answer (Gemma)
app.post('/generate-short-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        const context = "Give a short, concise 2-3 line answer only.";
        const result = await callModelWithPrompt("google/gemma-3n-e2b-it:free", prompt, context);
        res.json({ text: result, source: 'gemma-3n' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ✅ Long Answer (Qwen)
app.post('/generate-long-answer', async (req, res) => {
    try {
        const { prompt } = req.body;
        const context = "Give a detailed, 300-500 word explanation with proper formatting.";
        const result = await callModelWithPrompt("qwen/qwen3-coder:free", prompt, context);
        if (req.query.download === 'pdf') return generatePDF(result, res);
        res.json({ text: result, source: 'qwen-coder' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ✅ Assignment (Gemini Flash EXP)
app.post('/generate-assignment', async (req, res) => {
    try {
        const { prompt } = req.body;
        const context = "Generate a full academic assignment with clear headings, 3500+ words.";
        const result = await callModelWithPrompt("google/gemini-2.0-flash-exp:free", prompt, context);
        if (req.query.download === 'pdf') return generatePDF(result, res);
        res.json({ text: result, source: 'gemini-2.0-flash-exp' });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// ✅ Health Check
app.get('/health', (req, res) => {
    res.json({ status: 'online', models: {
        short: "gemma-3n-e2b-it:free",
        long: "qwen3-coder:free",
        assignment: "gemini-2.0-flash-exp:free"
    }});
});

// ✅ Start Server
app.listen(PORT, () => {
    console.log(`🚀 Server ready at http://localhost:${PORT}`);
});